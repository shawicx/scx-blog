---
import themeConfig from '@/config'
import { ui } from '@/i18n/ui'
import { getPageInfo } from '@/utils/page'
import LanguageSwitcherIcon from '@/assets/icons/language-switcher.svg'
import ThemeToggleIcon from '@/assets/icons/theme-toggle.svg'
import { moreLocales, themeConfig as config } from '@/config'
import { getNextGlobalLangPath } from '@/i18n/path'

const { currentLang, getLocalizedPath, isPost } = getPageInfo(Astro.url.pathname)
const { title, subtitle, i18nTitle } = themeConfig.site
const { 
  light: { background: lightMode },
  dark: { background: darkMode },
} = config.color

const currentUI = ui[currentLang as keyof typeof ui] ?? {}
const headerTitle = i18nTitle ? currentUI.title : title
const headerSubtitle = i18nTitle ? currentUI.subtitle : subtitle

const TitleTag = isPost ? 'h2' : 'h1'
const SubtitleTag = isPost ? 'div' : 'h2'

// Navigation items
const currentPath = Astro.url.pathname
const isWorkActive = currentPath.startsWith('/work/')
const isStudyActive = currentPath.startsWith('/study/')
const isHomeActive = Astro.url.pathname === '/'

function getNavItemClass(isActive: boolean) {
  return isActive
    ? 'highlight-static c-primary font-bold after:bottom-0.7em'
    : 'highlight-hover transition-[colors,font-weight] after:bottom-0.7em hover:(c-primary font-bold)'
}

const navItems = [
  {
    href: '/',
    label: '首页',
    className: getNavItemClass(isHomeActive),
  },
  {
    href: '/work/',
    label: '工作记录',
    className: getNavItemClass(isWorkActive),
    children: [
      { href: '/work/uniubi/', label: '宇泛' },
      { href: '/work/viewshine/', label: '威星' },
    ]
  },
  {
    href: '/study/',
    label: '学习记录',
    className: getNavItemClass(isStudyActive),
  },
]

// Check if there are other languages to switch
const showLanguageSwitcher = moreLocales.length > 0
const nextUrl = getNextGlobalLangPath(currentPath) // Using global path for this implementation
---

<header
  class:list={[
    'fixed top-0 left-0 right-0 z-50 bg-white dark:bg-dark',
    'px-[min(7.25vw,3.731rem)] lg:px-[max(5.75rem,calc(50vw-34.25rem))]',
    'border-b border-gray-200 dark:border-gray-700',
    'cjk:tracking-0.02em',
  ]}
>
  <div class="mx-auto max-w-205.848 lg:max-w-[min(calc(75vw-16rem),44rem)] py-4 flex justify-between items-center">
    <!-- Header title and subtitle on the left -->
    <div class="flex flex-col">
      <TitleTag
        class:list={[
          isPost
            ? `text-5.375 c-secondary lg:(text-9 c-primary)`
            : `w-75% text-8 c-primary lg:(w-full text-9)`,
          'font-bold font-title',
        ]}
      >
        <!-- Fix text cropping issues during view transition on iOS by adding a div tag -->
        <div
          class="box-content inline-block pr-1"
          transition:name={`site-title-${currentLang}`}
          data-disable-theme-transition
        >
          <a
            id="site-title-link"
            href={getLocalizedPath('/')}
          >
            {headerTitle}
          </a>
        </div>
      </TitleTag>

      {headerSubtitle && (
        <SubtitleTag
          class:list={[
            isPost
              ? `op-0 lg:op-100`
              : 'w-75% lg:w-full',
            'text-3.5 c-secondary font-navbar lg:text-4',
          ]}
          aria-hidden={isPost}
        >
          {headerSubtitle}
        </SubtitleTag>
      )}
    </div>

    <!-- Navigation in the center -->
    <nav
      aria-label="Site Navigation"
      class="hidden lg:flex"
    >
      <ul class="flex items-center space-x-8 text-3.6 font-semibold leading-2.45em font-navbar cjk:tracking-0.02em">
        {navItems.map(item => (
          <li class="relative group">
            <a
              href={item.href}
              class={item.className}
            >
              {item.label}
            </a>
            {item.children && (
              <ul class="absolute top-full left-0 min-w-32 bg-white dark:bg-dark border border-gray-200 dark:border-gray-700 rounded-md shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10">
                {item.children.map(child => (
                  <li>
                    <a
                      href={child.href}
                      class="block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
                    >
                      {child.label}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </li>
        ))}
      </ul>
    </nav>

    <!-- Theme and language toggle on the right -->
    <div class="flex gap-4">
      <!-- Language Switcher -->
      {showLanguageSwitcher && (
        <a
          id="language-switcher"
          href={nextUrl}
          class="aspect-square w-4 c-secondary active:scale-90 hover:c-primary"
          aria-label="Switch website language"
        >
          <LanguageSwitcherIcon
            aria-hidden="true"
            fill="currentColor"
          />
        </a>
      )}

      <!-- Theme Toggle -->
      <button
        id="theme-toggle-button"
        class="aspect-square w-4 c-secondary active:scale-90 hover:c-primary"
        aria-label="Switch light/dark theme"
      >
        <ThemeToggleIcon
          aria-hidden="true"
          fill="currentColor"
        />
      </button>
    </div>
  </div>
</header>

<!-- Theme Toggle Script -->
<script
  is:inline
  define:vars={{
    lightMode,
    darkMode,
  }}
>
// Apply theme changes
function applyTheme(isDark) {
  document.documentElement.classList.toggle('dark', isDark)

  // Update meta theme-color tag
  const metaThemeColor = document.head.querySelector('meta[name="theme-color"]')
  if (metaThemeColor && lightMode && darkMode) {
    metaThemeColor.setAttribute('content', isDark ? darkMode : lightMode)
  }

  localStorage.setItem('theme', isDark ? 'dark' : 'light')
  document.dispatchEvent(new Event('theme-changed'))
}

// Toggle theme mode
function toggleTheme() {
  const isDark = !document.documentElement.classList.contains('dark')
  applyTheme(isDark)
}

// Handle theme toggle click events
function handleThemeToggleClick(e) {
  const target = e.target instanceof Element ? e.target : null
  const button = target?.closest('#theme-toggle-button')

  if (!button) {
    return
  }

  // If reduceMotion is enabled, update theme directly
  if (document.documentElement.classList.contains('reduce-motion')) {
    toggleTheme()
    return
  }

  // Add temporary markers before view transition
  document.documentElement.style.setProperty('view-transition-name', 'animation-theme-toggle')
  document.documentElement.setAttribute('data-theme-changing', '')

  // Use View Transitions API for theme toggle
  const transition = document.startViewTransition(toggleTheme)

  // Remove temporary markers after view transition
  transition.finished.then(() => {
    document.documentElement.style.removeProperty('view-transition-name')
    document.documentElement.removeAttribute('data-theme-changing')
  })
}

// Bind click event to the button
document.addEventListener('click', handleThemeToggleClick, { passive: true })

// Listen to system theme changes in real time
window.matchMedia('(prefers-color-scheme: dark)')
  .addEventListener('change', (event) => {
    const isDark = event.matches
    // Apply system theme preference
    applyTheme(isDark)
  })
</script>